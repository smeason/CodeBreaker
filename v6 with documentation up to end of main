import java.util.ArrayList;
import java.util.Scanner;

/*
 * Code Breaker, created by Samson and Bryan
 * Date: March 8th 2019
 * 
 * Description: A simple text-based program on the classic codebreaker game.
 * 				The game is played with computer creating code and clues, and player guessing.
 * 				In this version, there are 6 possible colours, and a 4 colour code, with duplicate colours allowed.
 */

public class one {

	static final int VALID_CHARS = 6;
	static final int CODE_LENGTH = 4;
	static final int MAX_GUESSES = 10;
	static int row = 0;
	static char[][] guessBoard = new char[MAX_GUESSES][CODE_LENGTH];
	static char[][] responseBoard = new char[MAX_GUESSES][CODE_LENGTH];
	static String colours = "YGBOPR";
	static int turnNum = 0;
	static int j = 0;
	static int respIndex= 0; // counter for responseBoard
	static char[] tempCode;
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		char[] code = new char[CODE_LENGTH];
		code = createCode(colours, CODE_LENGTH); // set code to a randomly generated code, with a length of 4.
		
		// output instructions
		System.out.println("\n\n+-+-+-+-+-+-+-+-+-+-+-+-+-+");
		System.out.println("| C O D E   B R E A K E R |");
		System.out.println("+-+-+-+-+-+-+-+-+-+-+-+-+-+");
		System.out.println("\nCreated by: Samson Wu and Bryan Chen.");
		System.out.println("(March 22, 2019)");
		
		System.out.println("\nHow to play the game: ");
		System.out.println(" * In this game, there are two people, you and the computer.");
		System.out.println(" * The computer will create a four letter code, using 6 colours, Yellow, Green, Blue, Orange, Purple, and Red.");
		System.out.println(" * After this is created, you will have 10 chances to guess the correct code.");
		System.out.println(" * To assist you in your code breaking, there will be clues provided.");
		System.out.println(" * You will get \"b\" for black and \"w\" for white.");
		System.out.println(" * Black means you guessed the correct colour AND placement.");
		System.out.println(" * White means you guessed ONLY the correct colour.");
		
		System.out.println(code);
		
		for (row = 0; row < MAX_GUESSES; row++) { // runs through every guess, with row acting as the row in the board 2d array.
			System.out.println("\nGuess the code using the available colours (" + colours + "):");
			System.out.print("######:");
			String strGuess = sc.next(); // get input and store in a temporary string guess.
			char[] guess = new char[strGuess.length()];
			for(int i = 0; i < strGuess.length(); i++) {
				char temp = strGuess.charAt(i); 
				guess[i] = temp; // set the guess to a char array
			}
			
			if (valid(guess, colours, guess.length)) {
				// add guess to guessBoard now that it is valid
				guessBoard[row] = guess;
				
				// Check for solved
				boolean solved = true;
				for(int i = 0; i < 4; i++) { // checks if guess and code aren't equal at any point
					if (guess[i] != code[i]) {
						solved = false;
						break;
					}
				}
				if (solved == true) {
					System.out.println("Congratulations! It took you " + (row+1) + " guesses to find the code.");
					return; // end program
				}
				// end of check for solved
				
				char[] currResponse = new char[4]; // create a current response array that holds the black outputs.
				currResponse = findFullyCorrect(code, guess); // find 'b' outputs
				for(int i = 0; i < 4; i++) {
					responseBoard[row][i] = currResponse[i]; // fill in the responseBoard with b's.
				}
				
				char[] ColourCorrect; // holds correct colours, or w's.
				ColourCorrect = removeFullyCorrect(code, guess);
				findColourCorrect(tempCode, ColourCorrect); // find 'w' outputs
				displayGame(guessBoard, responseBoard); // display the board. Only outputs necessary lines.
				
			} else { // if guess is invalid, get them to geuss again, without adding to the row, since a guess cannot be added.
				row--;
			}
		}
		System.out.print("I'm sorry, you lose. The correct code was ");
		for(int i = 0; i < 4; i++) {
			System.out.print(code[i]);
		}
		System.out.print(".");
		
		
	}
	
	/*
	 * 
	 * 
	 */
	public static char[] createCode (String colours, int codeLen) {
		
		char[] tempCode = new char[codeLen];
		int temp = (int)(Math.random()*6);
		tempCode[0] = determineColour(temp);
		
		for (int i = 1; i < codeLen; i++) {
			temp = (int)(Math.random()*6);
			char temp2 = determineColour(temp);
			tempCode[i] = temp2;
		}
		return tempCode;
		
	}
	public static char determineColour (int num) {
		char colour = 0;
		if (num == 0) colour = 'G';
		else if (num == 1) colour = 'R';
		else if (num == 2) colour = 'B';
		else if (num == 3) colour = 'Y';
		else if (num == 4) colour = 'O';
		else colour = 'P';
		return colour;
	
	}
	
	public static boolean valid(char[] guess, String colours, int length) { // method to check if the guess of the
																			// player is valid
		int validCounter = 0; // initialize counter variable
		if (length != CODE_LENGTH) { // determine if guess is the correct length
			System.out.println(
					"Please enter your guess again of length " + CODE_LENGTH + " using the letters " + colours);
			return false; // return false if guess is wrong length
		}

		for (int i = 0; i < CODE_LENGTH; i++) { // nested for loops to determine if each colour guessed is a valid
			validCounter = 0;					// colour
			for (int j = 0; j < colours.length(); j++) {
				if (guess[i] == (colours.charAt(j))) {
					validCounter++;
				}
			}
			if (validCounter == 0) {
				System.out.println(
						"Please enter your guess again of length " + CODE_LENGTH + " using the letters " + colours);
				return false; // if the guess contains a colour that is invalid, returns false
			}
		}
		return true; // if no problems are encountered, return true
	}

	public static char[] findFullyCorrect(char[] code, char[] guess) {
		char[] tempResponse = new char[4];
		respIndex = 0;
		for (int i = 0; i < guess.length; i++) {
			if (guess[i] == code[i]) {
				tempResponse[respIndex] = 'b';
				respIndex++;
			}
		}
		return tempResponse;
	}
	
	public static char[] removeFullyCorrect(char[] code, char[] guess) {
		String fullyCorrect = "";
		String strCode = "";
		for(int i = 0; i < CODE_LENGTH; i++) {
			if (guess[i] != code[i]) {
				fullyCorrect += guess[i];
				strCode += code[i];
			}
		}
		char[] fCorrect = new char[fullyCorrect.length()];
		tempCode = new char[fullyCorrect.length()];
		for(int i = 0; i < fullyCorrect.length(); i++) {
			fCorrect[i] = fullyCorrect.charAt(i);
			tempCode[i] = strCode.charAt(i);
		}
		return fCorrect;
	}
	
	public static void findColourCorrect(char[] code, char[] guess) {
		ArrayList<String> codeList = new ArrayList<String>();
		ArrayList<String> guessList = new ArrayList<String>();
		for(char i : code) {
			String temp = Character.toString(i);
			codeList.add(temp);
		}
		for(char i : guess) {
			String temp = Character.toString(i);
			guessList.add(temp);
		}
		
		for(int i = 0; i < codeList.size(); i++) {
			for(int j = 0; j < guessList.size(); j++) {
				if (j != i && codeList.get(i).equals(guessList.get(j))) {
					responseBoard[row][respIndex] = 'w';
					respIndex++;
					guessList.set(j, "z"); // set to z so it won't check an already found pair
					break;
				}
			}
		}
	}

	public static void displayGame(char[][] guessBoard, char[][] responseBoard) {
		System.out.println("Guess      Clues");
		System.out.println("****************");
		for (int i = 0; i <= row; i++) {
			for (int j = 0; j < CODE_LENGTH; j++) {
				System.out.print(guessBoard[i][j]);
			}
			System.out.print("       ");
			for (int j = 0; j < CODE_LENGTH; j++) {
				System.out.print(responseBoard[i][j]);
			}
			System.out.println();
		}
	}
	
}
